{"version":3,"sources":["services/notes.js","App.js","serviceWorker.js","index.js"],"names":["request","axios","get","nonExisting","id","content","date","important","then","response","data","concat","newObject","post","put","note","delete","console","log","Note","toggleImportance","deleteNote","label","onClick","value","Notification","errorMessage","text","status","className","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","index","indexOf","setTimeout","splice","map","key","find","n","changedNote","returnedNote","catch","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","onChange","target","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0eac578c.chunk.js","sourcesContent":["import axios from 'axios'\n//const baseUrl = 'https://morning-wildwood-72184.herokuapp.com/api/notes'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  // return request.then((response) => response.data)\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then((response) => response.data.concat(nonExisting))\n}\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then((response) => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then((response) => response.data)\n}\n\nconst deleteNote = (note) => {\n  const request = axios.delete(`${baseUrl}/${note.id}`)\n  console.log(request)\n  return request.then((response) => response.data)\n}\nexport default {\n  getAll,\n  create,\n  update,\n  deleteNote,\n}\n","import React, { useState, useEffect } from 'react'\r\nimport noteService from './services/notes'\r\nimport './App.css'\r\n\r\nconst Note = ({ note, toggleImportance, deleteNote }) => {\r\n  const label = note.important ? 'make not important' : 'make important'\r\n\r\n  return (\r\n    <li>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n      <button value={note.id} onClick={() => deleteNote(note)}>\r\n        Delete\r\n      </button>\r\n    </li>\r\n  )\r\n}\r\n\r\nconst Notification = ({ errorMessage, text, status }) => {\r\n  if (errorMessage === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div text={text} status={status} className=\"error\">\r\n      {errorMessage.text}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('')\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  useEffect(() => {\r\n    noteService.getAll().then((initialNotes) => {\r\n      setNotes(initialNotes)\r\n    })\r\n  }, [])\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() < 0.5,\r\n    }\r\n\r\n    noteService.create(noteObject).then((returnedNote) => {\r\n      console.log(noteObject)\r\n      setNotes(notes.concat(returnedNote))\r\n      setNewNote('')\r\n    })\r\n  }\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find((n) => n.id === id)\r\n    const changedNote = { ...note, important: !note.important }\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then((returnedNote) => {\r\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)))\r\n      })\r\n      .catch(() => {\r\n        setErrorMessage(\r\n          `the note '${note.content}' was already deleted from server`\r\n        )\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000)\r\n        setNotes(notes.filter((n) => n.id !== id))\r\n      })\r\n  }\r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter((note) => note.important === true)\r\n\r\n  const deleteNote = (note) => {\r\n    let index = notes.indexOf(note)\r\n    noteService.deleteNote(note).then(() => {\r\n      console.log(note)\r\n      setErrorMessage({ text: `Note id: ${note.id} deleted`, status: 'ok' })\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 3000)\r\n      console.log(errorMessage)\r\n    })\r\n    notes.splice(index, 1)\r\n    setNotes([...notes])\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification errorMessage={errorMessage} />\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note) => (\r\n          <Note\r\n            key={note.id}\r\n            note={note}\r\n            toggleImportance={() => toggleImportanceOf(note.id)}\r\n            deleteNote={deleteNote}\r\n          />\r\n        ))}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input onChange={handleNoteChange} value={newNote} />\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more aout service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n\r\n//https://fullstackopen.com/en\r\n"],"sourceRoot":""}